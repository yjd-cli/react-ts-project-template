{
  // https://www.typescriptlang.org/tsconfig
  // 注意：
  // 1、当前配置文件的配置为基础配置，被其他类型的配置文件继承使用；
  // 2、当前配置文件的配置编写顺序、类别遵循官方的排列顺序；
  "compilerOptions": {
    /**************************** Type Checking 相关配置 ****************************/
    /**************************** Type Checking 相关配置 ****************************/
    /**************************** Type Checking 相关配置 ****************************/

    // 开启所有的严格检查配置
    "strict": true,

    // 不允许使用隐式的 any 类型
    "noImplicitAny": false,

    // 不允许 this 有隐式的 any 类型，即 this 必须有明确的指向
    // "noImplicitThis": false,
    // 不允许把 null、undefined 赋值给其他类型变量
    "strictNullChecks": false,

    /****** Type Checking 中关于语法检查的配置，这种检查交给 eslint 就行，没必要配置 ******/
    /****** Type Checking 中关于语法检查的配置，这种检查交给 eslint 就行，没必要配置 ******/
    /****** Type Checking 中关于语法检查的配置，这种检查交给 eslint 就行，没必要配置 ******/

    /* 有未使用到的本地变量时报错 */
    // "noUnusedLocals": true,
    /* 有未使用到的函数参数时报错 */
    // "noUnusedParameters": true,
    /* 每个分支都要有返回值 */
    // "noImplicitReturns": true,
    /* 严格校验 switch-case 语法 */
    // "noFallthroughCasesInSwitch": true,

    /**************************** Modules 相关配置 ****************************/
    /**************************** Modules 相关配置 ****************************/
    /**************************** Modules 相关配置 ****************************/

    /* 在解析非绝对路径模块名的时候的基准路径 */
    "baseUrl": "./",

    /* 基于 'baseUrl' 的路径映射集合 */
    "paths": {
      /*路径映射的集合*/
      "@src/*": ["src/*"]
    },

    /* 指定模块代码的生成方式: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */
    "module": "ESNext",

    // 制定模块解析策略
    "moduleResolution": "Node",

    /* 声明文件目录，默认 node_modules/@types */
    // "typeRoots": [],

    /* 要导入的声明文件包，默认导入上面声明文件目录下的所有声明文件 */
    // "types": [],

    "resolveJsonModule": true,

    /**************************** Emit 相关配置 ****************************/
    /**************************** Emit 相关配置 ****************************/
    /**************************** Emit 相关配置 ****************************/

    /* 生成相应的类型声明文件 —— '.d.ts' */
    // "declaration": true,
    /* 声明文件的输出路径 */
    // "declarationDir": "./d",
    /* 只生成声明文件，不生成 JS */
    // "emitDeclarationOnly": true,

    // 不生成文件，只做类型检查
    "noEmit": true,

    /* 发生错误时不输出文件 */
    // "noEmitOnError": true,
    /* 不生成 helper 函数，以前的话设置为 true 后，需要额外安装 ts-helpers */
    /* 类似于 babel ，会给每个文件都生成 helper 函数，会使得最终编译后的包的体积变大 */
    // "noEmitHelpers": true,
    /* 现在可以通过 tslib（TS 内置的库）引入 helper 函数，！！！文件必须是模块 ！！！ */
    /* 编译后自动引入 var tslib_1 = require("tslib") */
    // "importHelpers": true,
    /* 指定 ts 文件位置 */
    // "sourceRoot": "",
    /* 指定 map 文件存放的位置 */
    // "mapRoot": "",
    /* 生成目标文件的 sourceMap */
    // "sourceMap": true,
    /* 将代码与sourcemaps生成到一个文件中，要求同时设置了--inlineSourceMap 或--sourceMap 属性*/
    // "inlineSources": true,
    /* 生成目标文件的 inline sourceMap —— 源文件和 sourcemap 文件在同一文件中，而不是把 map 文件放在一个单独的文件里*/
    // "inlineSourceMap": true,
    /* 生成声明文件的 sourceMap */
    // "declarationMap": true,
    // 当目标是ES5或ES3的时候提供对for-of、扩展运算符和解构赋值中对于迭代器的完整支持
    // "downlevelIteration": true,

    /**************************** JavaScript Support 相关配置 ****************************/
    /**************************** JavaScript Support 相关配置 ****************************/
    /**************************** JavaScript Support 相关配置 ****************************/

    // 是否允许编译 JS 文件
    "allowJs": true,

    // 检查 JS 文件
    "checkJs": true,

    /**************************** Interop Constraints 相关配置 ****************************/
    /**************************** Interop Constraints 相关配置 ****************************/
    /**************************** Interop Constraints 相关配置 ****************************/

    /* 当没有默认导出的时候允许默认导入，这个在代码执行的时候没有作用，只是在类型检查的时候生效 */
    "allowSyntheticDefaultImports": true,

    // 允许 export = xxx 导出 ，并使用 import xxx form "module-name" 导入
    "esModuleInterop": false,

    /* 强制区分大小写 */
    "forceConsistentCasingInFileNames": true,

    /* 隔离模块 */
    "isolatedModules": true,

    /* 不要 symlinks 解析的真正路径 */
    // "preserveSymlinks": true,

    /**************************** Language and Environment 相关配置 ****************************/
    /**************************** Language and Environment 相关配置 ****************************/
    /**************************** Language and Environment 相关配置 ****************************/

    /* 指定 ECMAScript 的目标版本: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019' or 'ESNEXT'. */
    "target": "ESNext",

    // 指定要包含在编译中的库文件（引用类库，即申明文件），如果输出的模块方式是 es5，就会默认引入 "dom","es5","scripthost"。如果在 TS 中想要使用一些 ES6 以上版本的语法，就需要引入相关的类库
    "lib": ["DOM", "DOM.Iterable", "ESNext"],

    // https://www.typescriptlang.org/tsconfig#jsx
    // "preserve", "react", "react-jsx", "react-jsxdev", "react-native"
    /* react => 直接将 JSX 编译成 JS，会生成 React.createElement 的形式，在使用前不需要再进行转换操作了，输出文件的扩展名为 .js */
    /* react-jsx => 适用于【React 17及以上的版本】，直接将 JSX 编译成 JS，会使用 react/jsx-runtime 提供的 jsx 方法，而不是 React.createElement，输出文件的扩展名为 .js */
    /* preserve => 不会将 JSX 编译成 JS，生成代码中会保留 JSX，以供后续的转换操作使用(比如：Babel)。输出文件的扩展名为 .jsx  */
    /* react-native => 相当于 preserve，它也保留了所有的 JSX，但是输出文件的扩展名为 .js */
    "jsx": "react",

    // 启用装饰器
    // "experimentalDecorators": true,

    // 启用 Class Fields
    "useDefineForClassFields": true,

    /**************************** Compiler Diagnostics 相关配置 ****************************/
    /**************************** Compiler Diagnostics 相关配置 ****************************/
    /**************************** Compiler Diagnostics 相关配置 ****************************/

    // 打印诊断信息
    // "diagnostics": true,
    /* 打印输出的文件 */
    // "listEmittedFiles": true,
    /* 打印编译的文件（包括引用的声明文件）*/
    // "listFiles": true,

    /**************************** Projects 相关配置 ****************************/
    /**************************** Projects 相关配置 ****************************/
    /**************************** Projects 相关配置 ****************************/

    // 开启增量编译：TS 编译器在第一次编译的时候，会生成一个存储编译信息的文件，下一次编译的时候，会根据这个文件进行增量的编译，以此提高 TS 的编译速度
    //  "incremental": true,
    // 指定存储增量编译信息的文件位置
    // "tsBuildInfoFile": "./",

    /**************************** Output Formatting 相关配置 ****************************/
    /**************************** Output Formatting 相关配置 ****************************/
    /**************************** Output Formatting 相关配置 ****************************/

    /**************************** Completeness 相关配置 ****************************/
    /**************************** Completeness 相关配置 ****************************/
    /**************************** Completeness 相关配置 ****************************/

    /* 跳过声明文件的类型检查 */
    // Rather than doing a full check of all d.ts files, TypeScript will type check the code you specifically refer to in your app’s source code.
    "skipLibCheck": true
  },

  /* 指定需要编译的单个文件列表 */
  // "files": [],

  /* 指定需要编译的文件/目录 */
  // "include": [
  //   // 只写一个目录名等价于 "./src/**/*"
  //   "src",
  // ],

  /* 指定需要排除的文件或目录 */
  // "exclude": [],
  
  // "references": [{ "path": "./tsconfig.node.json" }]
}
